@@resource CodeInspectorStrings English
{
}
@|
@@resource CodeInspectorStrings ChineseSimplified
{
}
@|
@@resource CodeInspectorStrings ChineseTraditional
{
}
@|
@@resource CodeInspectorStrings Japanese
{
}
@|
@@resource CodeInspectorStrings Spanish
{
}
@|
@@resource CodeInspectorExpressions
{
"DockedCell" -> Cell[BoxData[
 DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
  GraphicsBox[{InsetBox[
     TemplateBox[{
       PaneBox[
        StyleBox[
        "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
         "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, StripOnInput -> 
         False], BaselinePosition -> (Baseline -> Scaled[0.65])], 
       TemplateBox[{8}, "Spacer1"], 
       PaneBox[
        PaneSelectorBox[{{False, False} -> 
          TemplateBox[{0}, "Spacer1"], {True, False} -> 
          TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
            InterpretationBox[
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "PercolateAnimator"][Medium]], 
             ProgressIndicator[Appearance -> "Percolate"], 
             BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
           False, True} -> 
          DynamicModuleBox[{
            CodeInspector`LinterUI`Private`tracker$$ = 
             CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
            DynamicWrapperBox[
             DynamicBox[
              ToBoxes[
              CodeInspector`LinterUI`Private`tracker$$; 
               LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
              TrackedSymbols :> {CodeInspector`LinterUI`Private`tracker$$}], 
             If[
             CodeInspector`LinterUI`Private`tracker$$ =!= 
              CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
              CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
            TrueQ[
             CodeInspector`LinterUI`Private`varValue[
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]}], 
         ImageSize -> Automatic], BaselinePosition -> Scaled[0.15]]},
      "Row",
      DisplayFunction->(PaneBox[
        RowBox[{
          TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
        Baseline]& ),
      InterpretationFunction->(RowBox[{"Row", "[", 
         RowBox[{
           RowBox[{"{", 
             TemplateSlotSequence[1, ","], "}"}], ",", 
           RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
     Offset[{8, 0}, {-1, 0}], {-1, 0}], InsetBox[
     PaneSelectorBox[{True->
      DynamicModuleBox[{CodeInspector`LinterUI`Private`hoverQ$$ = False, 
       CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
       CodeInspector`LinterUI`Private`fontColor$$}, 
       ButtonBox[
        DynamicWrapperBox[
         TemplateBox[{
           DynamicWrapperBox[
            StyleBox[
             PaneBox[
             "\"Reanalyze Notebook\"", ContentPadding -> True, FrameMargins -> 
              None, BaselinePosition -> Baseline], FontColor -> 
             Dynamic[CodeInspector`LinterUI`Private`fontColor$$], FontColor -> 
             GrayLevel[0.2], FontFamily -> "Source Sans Pro", FontWeight -> 
             Plain, FontSize -> 14, StripOnInput -> False], 
            CodeInspector`LinterUI`Private`fontColor$$ = Which[
              TrueQ[
               Not[
                
                OptionValue[{
                 ImageSize -> {Automatic, 19}, 
                  FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                  Baseline, Alignment -> {Center, Center}, Method -> 
                  "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                  "TextHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonTextHover"],
                   "TextInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonTextInactive"], "BackColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                  "BackHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonBackHover"],
                   "BackMouseDownColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonBackMouseDown"], "BackInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonBackInactive"], "EdgeColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                  "EdgeHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"],
                   "EdgeInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"]]], 
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
               "TextInactiveColor"], CodeInspector`LinterUI`Private`hoverQ$$, 
              
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
               "TextHoverColor"], True, 
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, "TextColor"]]],
            ContentPadding -> False, FrameMargins -> {{9, 9}, {0, 0}}, 
           Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
           RoundingRadius -> 3, FrameStyle -> Dynamic[
             Directive[
              AbsoluteThickness[0.5], 
              Which[
               TrueQ[
                Not[
                 
                 OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                  "ActiveQ"]]], 
               
               OptionValue[{
                ImageSize -> {Automatic, 19}, 
                 FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                 Baseline, Alignment -> {Center, Center}, Method -> 
                 "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                 "TextHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                 "TextInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonTextInactive"], "BackColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                 "BackHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                 "BackMouseDownColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonBackMouseDown"], "BackInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonBackInactive"], "EdgeColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                 "EdgeHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                 "EdgeInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                "EdgeInactiveColor"], CodeInspector`LinterUI`Private`hoverQ$$, 
               
               OptionValue[{
                ImageSize -> {Automatic, 19}, 
                 FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                 Baseline, Alignment -> {Center, Center}, Method -> 
                 "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                 "TextHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                 "TextInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonTextInactive"], "BackColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                 "BackHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                 "BackMouseDownColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonBackMouseDown"], "BackInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonBackInactive"], "EdgeColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                 "EdgeHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                 "EdgeInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                "EdgeHoverColor"], True, 
               
               OptionValue[{
                ImageSize -> {Automatic, 19}, 
                 FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                 Baseline, Alignment -> {Center, Center}, Method -> 
                 "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                 "TextHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                 "TextInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonTextInactive"], "BackColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                 "BackHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                 "BackMouseDownColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonBackMouseDown"], "BackInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonBackInactive"], "EdgeColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                 "EdgeHoverColor" -> 
                 CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                 "EdgeInactiveColor" -> 
                 CodeInspector`LinterUI`Private`colorData[
                  "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                "EdgeColor"]]]], Background -> Dynamic[
             Which[
              TrueQ[
               Not[
                
                OptionValue[{
                 ImageSize -> {Automatic, 19}, 
                  FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                  Baseline, Alignment -> {Center, Center}, Method -> 
                  "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                  "TextHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonTextHover"],
                   "TextInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonTextInactive"], "BackColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                  "BackHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonBackHover"],
                   "BackMouseDownColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonBackMouseDown"], "BackInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonBackInactive"], "EdgeColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                  "EdgeHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"],
                   "EdgeInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"]]], 
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
               "BackInactiveColor"], 
              And[
              CodeInspector`LinterUI`Private`hoverQ$$, 
               CodeInspector`LinterUI`Private`mouseDownQ$$], 
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
               "BackMouseDownColor"], CodeInspector`LinterUI`Private`hoverQ$$, 
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
               "BackHoverColor"], True, 
              
              OptionValue[{
               ImageSize -> {Automatic, 19}, 
                FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                Baseline, Alignment -> {Center, Center}, Method -> 
                "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                "TextHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
                "TextInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonTextInactive"], "BackColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                "BackHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
                "BackMouseDownColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackMouseDown"], "BackInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonBackInactive"], "EdgeColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                "EdgeHoverColor" -> 
                CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
                "EdgeInactiveColor" -> 
                CodeInspector`LinterUI`Private`colorData[
                 "ButtonEdgeInactive"]}, {Method -> "Queued"}, "BackColor"]]]},
          "Highlighted"], 
         CodeInspector`LinterUI`Private`hoverQ$$ = CurrentValue["MouseOver"]; 
         CodeInspector`LinterUI`Private`mouseDownQ$$ = 
          CurrentValue["MouseButtonTest"]],
        Appearance->None,
        BaselinePosition->Baseline,
        ButtonFunction:>If[
         OptionValue[{
            ImageSize -> {Automatic, 19}, 
             FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
             Baseline, Alignment -> {Center, Center}, Method -> "Preemptive", 
             "ActiveQ" -> True, "TextColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonText"], 
             "TextHoverColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
             "TextInactiveColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonTextInactive"], 
             "BackColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
             "BackHoverColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
             "BackMouseDownColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonBackMouseDown"], 
             "BackInactiveColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonBackInactive"], 
             "EdgeColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
             "EdgeHoverColor" -> 
             CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
             "EdgeInactiveColor" -> 
             CodeInspector`LinterUI`Private`colorData[
              "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
          False, 
          CodeInspector`LinterUI`Private`attachAnalysisAction[
           EvaluationNotebook[]]],
        ContentPadding->False,
        Evaluator->Automatic,
        Method->"Queued"],
       DynamicModuleValues:>{}], False->
      ButtonBox[
       TemplateBox[{
         StyleBox[
         "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
          "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
          StripOnInput -> False], ImageSize -> {Automatic, 19}, 
         FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
         Alignment -> {Center, Center}, Background -> GrayLevel[1], 
         FrameStyle -> Dynamic[
           If[
            CurrentValue["MouseOver"], 
            Hue[0.55, 0.82, 0.87], 
            GrayLevel[0.8]]]},
        "Highlighted"],
       Appearance->False,
       ButtonFunction:>(CurrentValue[
           EvaluationNotebook[], DockedCells] = 
         With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
              EvaluationNotebook[], DockedCells]}, 
           Pick[LinterUIDockedCell`Private`dockedCells, 
            Map[Quiet[
               Options[#, CellTags]] =!= {
              CellTags -> "CodeAnalysisDockedCell"}& , 
             LinterUIDockedCell`Private`dockedCells]]]; 
        Needs["CodeInspector`"]; 
        CodeInspector`AttachAnalysis[LinterUIDockedCell`Private`notebook$$]),
       Evaluator->Automatic,
       Method->"Queued"]}, Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
         CodeInspector`LinterUI`Private`varValue[
         LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]],
      ImageSize->Automatic], Offset[{-26, 0}, {1, 0}], {1, 0}], 
    TagBox[
     TagBox[
      TooltipBox[{
        {GrayLevel[0.6], DiskBox[Offset[{-11, 0}, {1, 0}], Offset[6]]}, 
        {GrayLevel[0.97], AbsoluteThickness[1.5], CapForm["Round"], 
         LineBox[{{Offset[{-13, 2}, {1, 0}], Offset[{-9, -2}, {1, 0}]}, {
           Offset[{-13, -2}, {1, 0}], Offset[{-9, 2}, {1, 0}]}}]}},
       "\"Close analysis\"",
       TooltipDelay->0,
       TooltipStyle->"TextStyling"],
      Annotation[#, "Close analysis", "Tooltip"]& ],
     EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
          Flatten[
           CodeInspector`LinterUI`Private`varValue[
           LinterUIDockedCell`Private`notebook$$, All, "UIAttachedCells"]]]; 
        Map[NotebookDelete, 
          Flatten[
           CodeInspector`LinterUI`Private`varValue[
           LinterUIDockedCell`Private`notebook$$, All, 
            "CleanCellBracketMarker"]]]; CurrentValue[
           EvaluationNotebook[], DockedCells] = 
         With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
              EvaluationNotebook[], DockedCells]}, 
           Pick[LinterUIDockedCell`Private`dockedCells, 
            Map[Quiet[
               Options[#, CellTags]] =!= {
              CellTags -> "CodeAnalysisDockedCell"}& , 
             LinterUIDockedCell`Private`dockedCells]]]; 
        CodeInspector`LinterUI`Private`applyToVar[Remove, {
           EvaluationNotebook[], All}]; 
        CodeInspector`LinterUI`Private`varSet[{
          LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
          False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
       PassEventsUp -> True}]]},
   AspectRatio->Full,
   ImageSize->{Full, 23},
   PlotRange->{{-1, 1}, {-1, 1}}],
  Deinitialization:>
   CodeInspector`LinterUI`Private`varSet[{
    LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False],
  DynamicModuleValues:>{},
  Initialization:>({
    LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
       Pattern[LinterUIDockedCell`Private`notebook, 
        Blank[NotebookObject]]] := 
     With[{LinterUIDockedCell`Private`formatIcon = 
        Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
       ActionMenu[
        Highlighted[
         Row[{
           CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
           LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, FontSize -> 
            14, FontWeight -> Plain], 
           Spacer[2], 
           LinterUIDockedCell`Private`formatIcon[
            CodeInspector`LinterUI`Private`iconData["DownChevron"][
             CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
         ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
         Background -> White, Frame -> True, FrameStyle -> Dynamic[
           If[
            CurrentValue["MouseOver"], 
            Hue[0.55, 0.82, 0.87], 
            GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
         Alignment -> {Center, Baseline}], 
        Map[LinterUIDockedCell`Private`dockedCellMenuItem, 
         CodeInspector`LinterUI`Private`varValue[
         LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
        None]], LinterUIDockedCell`Private`dockedCellMenuItem[
       Pattern[LinterUIDockedCell`Private`cell, 
        Blank[CellObject]]] := With[{}, Graphics[{
          Inset[
           With[{LinterUIDockedCell`Private`expressionString = First[
               FrontEndExecute[
                FrontEnd`ExportPacket[
                 First[
                  CodeInspector`LinterUI`Private`varValue[
                  LinterUIDockedCell`Private`cell, "CellContents"]], 
                 "InputText"]]]}, {
            LinterUIDockedCell`Private`noLineBreaks = 
             StringReplace[
              LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
            LinterUIDockedCell`Private`previewString = 
             StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
            CodeInspector`LinterUI`Private`styleData["FixedWidth"][
             If[
             StringLength[LinterUIDockedCell`Private`expressionString] > 
              LinterUIDockedCell`Private`$previewLength, 
              StringJoin[
               StringDrop[LinterUIDockedCell`Private`previewString, -1], 
               "\[Ellipsis]"], 
              LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 0}], 
          
          Inset[
           CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
           LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
         ImageSize -> {300, 25}, AspectRatio -> Full, 
         PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
        SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
        With[{LinterUIDockedCell`Private`nb = 
           ParentNotebook[LinterUIDockedCell`Private`cell]}, 
          FrontEndExecute[
           FrontEnd`FrontEndToken[
           LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
        SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
     LinterUIDockedCell`Private`$previewLength = 28, 
     CodeInspector`LinterUI`Private`applyToVar[
       Pattern[CodeInspector`LinterUI`Private`function, 
        Blank[]], {
        Pattern[CodeInspector`LinterUI`Private`cell, 
         Blank[CellObject]], 
        Pattern[CodeInspector`LinterUI`Private`name, 
         Blank[String]]}, 
       Pattern[CodeInspector`LinterUI`Private`args, 
        BlankNullSequence[]]] := 
     Apply[CodeInspector`LinterUI`Private`function, 
       Join[
        ToHeldExpression[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`cell, 
          CodeInspector`LinterUI`Private`name]], 
        Hold[CodeInspector`LinterUI`Private`args]]], Null, 
     CodeInspector`LinterUI`Private`applyToVar[
       Pattern[CodeInspector`LinterUI`Private`function, 
        Blank[]], {
        Condition[
         Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
          Blank[]], 
         MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
          Alternatives[
           Blank[CellObject], 
           Blank[NotebookObject]]]], All}, 
       Pattern[CodeInspector`LinterUI`Private`args, 
        BlankNullSequence[]]] := 
     Map[Apply[CodeInspector`LinterUI`Private`function, 
        Join[
         ToHeldExpression[#], 
         Hold[CodeInspector`LinterUI`Private`args]]]& , 
       Names[
        StringJoin[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`cellOrNB], "*"]]], Null, 
     CodeInspector`LinterUI`Private`applyToVar[
       Pattern[CodeInspector`LinterUI`Private`function, 
        Blank[]], {
        Pattern[CodeInspector`LinterUI`Private`notebook, 
         Blank[NotebookObject]], All, 
        Pattern[CodeInspector`LinterUI`Private`name, 
         Blank[String]]}, 
       Pattern[CodeInspector`LinterUI`Private`args, 
        BlankNullSequence[]]] := 
     Map[Apply[CodeInspector`LinterUI`Private`function, 
        Join[
         ToHeldExpression[#], 
         Hold[CodeInspector`LinterUI`Private`args]]]& , 
       Names[
        StringJoin[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`notebook], "*", 
         CodeInspector`LinterUI`Private`name]]], 
     CodeInspector`LinterUI`Private`varValue[
       Condition[
        Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
         Blank[]], 
        MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
         Alternatives[
          Blank[CellObject], 
          Blank[NotebookObject]]]], 
       Pattern[CodeInspector`LinterUI`Private`name, 
        Blank[String]]] := Symbol[
       CodeInspector`LinterUI`Private`varNameString[
       CodeInspector`LinterUI`Private`cellOrNB, 
        CodeInspector`LinterUI`Private`name]], Null, 
     CodeInspector`LinterUI`Private`varValue[
       Pattern[CodeInspector`LinterUI`Private`cell, 
        Blank[CellObject]], 
       Pattern[CodeInspector`LinterUI`Private`lint, 
        Blank[CodeInspector`InspectionObject]], 
       Pattern[CodeInspector`LinterUI`Private`name, 
        Blank[String]]] := Symbol[
       CodeInspector`LinterUI`Private`varNameString[
       CodeInspector`LinterUI`Private`cell, 
        CodeInspector`LinterUI`Private`lint, 
        CodeInspector`LinterUI`Private`name]], Null, 
     CodeInspector`LinterUI`Private`varValue[
       Condition[
        Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
         Blank[]], 
        MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
         Alternatives[
          Blank[CellObject], 
          Blank[NotebookObject]]]], All] := Map[Symbol, 
       Names[
        StringJoin[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`cellOrNB], "*"]]], Null, 
     CodeInspector`LinterUI`Private`varValue[
       Pattern[CodeInspector`LinterUI`Private`notebook, 
        Blank[NotebookObject]], All, 
       Pattern[CodeInspector`LinterUI`Private`name, 
        Blank[String]]] := Map[Symbol, 
       Names[
        StringJoin[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`notebook], "*", 
         CodeInspector`LinterUI`Private`name]]], 
     CodeInspector`LinterUI`Private`varSet[{
        Condition[
         Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
          Blank[]], 
         MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
          Alternatives[
           Blank[CellObject], 
           Blank[NotebookObject]]]], 
        Pattern[CodeInspector`LinterUI`Private`name, 
         Blank[String]]}, 
       Pattern[CodeInspector`LinterUI`Private`value, 
        Blank[]]] := Apply[Set, 
       Append[
        ToHeldExpression[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`cellOrNB, 
          CodeInspector`LinterUI`Private`name]], 
        CodeInspector`LinterUI`Private`value]], Null, 
     CodeInspector`LinterUI`Private`varSet[{
        Pattern[CodeInspector`LinterUI`Private`cell, 
         Blank[CellObject]], 
        Pattern[CodeInspector`LinterUI`Private`lint, 
         Blank[CodeInspector`InspectionObject]], 
        Pattern[CodeInspector`LinterUI`Private`name, 
         Blank[String]]}, 
       Pattern[CodeInspector`LinterUI`Private`value, 
        Blank[]]] := Apply[Set, 
       Append[
        ToHeldExpression[
         CodeInspector`LinterUI`Private`varNameString[
         CodeInspector`LinterUI`Private`cell, 
          CodeInspector`LinterUI`Private`lint, 
          CodeInspector`LinterUI`Private`name]], 
        CodeInspector`LinterUI`Private`value]], 
     CodeInspector`LinterUI`Private`varNameString[
       Pattern[CodeInspector`LinterUI`Private`notebook, 
        Blank[NotebookObject]]] := 
     StringJoin["CodeInspector`LinterUI`Private`Vars`", "$$", 
       With[{
        CodeInspector`LinterUI`Private`nbID = 
         Last[CodeInspector`LinterUI`Private`notebook]}, 
        If[
         StringQ[CodeInspector`LinterUI`Private`nbID], 
         StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
         ToString[CodeInspector`LinterUI`Private`nbID]]], "$$"], Null, 
     CodeInspector`LinterUI`Private`varNameString[
       Pattern[CodeInspector`LinterUI`Private`cell, 
        Blank[CellObject]]] := StringJoin[
       CodeInspector`LinterUI`Private`varNameString[
        Replace[
         ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
         EvaluationNotebook[]]], 
       With[{
        CodeInspector`LinterUI`Private`cellID = 
         First[CodeInspector`LinterUI`Private`cell]}, 
        If[
         StringQ[CodeInspector`LinterUI`Private`cellID], 
         StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
         ToString[CodeInspector`LinterUI`Private`cellID]]], "$$"], Null, 
     CodeInspector`LinterUI`Private`varNameString[
       Pattern[CodeInspector`LinterUI`Private`notebook, 
        Blank[NotebookObject]], 
       Pattern[CodeInspector`LinterUI`Private`name, 
        Blank[String]]] := StringJoin[
       CodeInspector`LinterUI`Private`varNameString[
       CodeInspector`LinterUI`Private`notebook], 
       CodeInspector`LinterUI`Private`name], Null, 
     CodeInspector`LinterUI`Private`varNameString[
       Pattern[CodeInspector`LinterUI`Private`cell, 
        Blank[CellObject]], 
       Pattern[CodeInspector`LinterUI`Private`name, 
        Blank[String]]] := StringJoin[
       CodeInspector`LinterUI`Private`varNameString[
       CodeInspector`LinterUI`Private`cell], 
       CodeInspector`LinterUI`Private`name], Null, 
     CodeInspector`LinterUI`Private`varNameString[
       Pattern[CodeInspector`LinterUI`Private`cell, 
        Blank[CellObject]], 
       Pattern[CodeInspector`LinterUI`Private`lint, 
        Blank[CodeInspector`InspectionObject]], 
       Pattern[CodeInspector`LinterUI`Private`name, 
        Blank[String]]] := StringJoin[
       CodeInspector`LinterUI`Private`varNameString[
       CodeInspector`LinterUI`Private`cell], 
       Apply[Sequence, 
        Riffle[
         Map[StringDelete[
           ToString[#], 
           Alternatives["[", "]", "{", "}", ",", " "]]& , 
          CodeInspector`LinterUI`Private`extractFirstList[
           Last[CodeInspector`LinterUI`Private`lint][CodeParser`Source]]], 
         "$"]], "$$", CodeInspector`LinterUI`Private`name], 
     CodeInspector`LinterUI`Private`extractFirstList[
       Pattern[CodeInspector`LinterUI`Private`expr, 
        Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
       Blank[List], {}, {0, Infinity}]}; 
   LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]),
  UnsavedVariables:>{LinterUIDockedCell`Private`notebook$$}]],
 CellFrame->{{0, 0}, {1, 1}},
 CellFrameMargins->{{0, 0}, {0, 0}},
 CellFrameColor->GrayLevel[0.85],
 Background->GrayLevel[0.97],
 CellTags->"CodeAnalysisDockedCell"]}
@|
@@resource CodeInspectorLocalizedExpressions English
{
}
@|
@@resource CodeInspectorLocalizedExpressions ChineseSimplified
{
}
@|
@@resource CodeInspectorLocalizedExpressions ChineseTraditional
{
}
@|
@@resource CodeInspectorLocalizedExpressions Japanese
{
}
@|
@@resource CodeInspectorLocalizedExpressions Spanish
{
}
@|
