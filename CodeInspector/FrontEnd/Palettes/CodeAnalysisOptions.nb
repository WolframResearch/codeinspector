(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     26047,        559]
NotebookOptionsPosition[     25504,        537]
NotebookOutlinePosition[     26034,        559]
CellTagsIndexPosition[     25991,        556]
MenuPosition->1150
WindowTitle->Code Analysis Options
WindowFrame->Palette*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{}, 
  TagBox[GridBox[{
     {
      TemplateBox[{1, 10},
       "Spacer2"]},
     {
      TemplateBox[{
        TemplateBox[{8}, "Spacer1"], 
        StyleBox[
        "\"Ignored Issues\"", FontColor -> GrayLevel[0.5], FontFamily -> 
         "Source Sans Pro", FontWeight -> "SemiBold", FontSize -> 12, 
         StripOnInput -> False]},
       "RowDefault"]},
     {
      TemplateBox[{1, 4},
       "Spacer2"]},
     {
      PaneBox[
       DynamicBox[ToBoxes[
        CodeInspector`LinterUI`Private`togglerTickle; 
         With[{CodeAnalysisOptionsPalette`Private`nb = InputNotebook[]}, 
           AbsoluteCurrentValue[
           CodeAnalysisOptionsPalette`Private`nb, 
            "SelectionHasUpdatedStyles"]]; Dynamic[
           CodeAnalysisOptionsPalette`Private`togglerPane[], SingleEvaluation -> 
           True, Background -> Hue[
             RandomReal[], 0, 0, 0]], StandardForm],
        ImageSizeCache->{337., {122., 123.}}],
       Alignment->Center,
       FrameMargins->{{8, 8}, {0, 0}}]},
     {
      TemplateBox[{1, 3},
       "Spacer2"]}
    },
    BaseStyle->{FontSize -> 1},
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
   "Column"],
  DynamicModuleValues:>{},
  Initialization:>{Condition[
      CodeAnalysisOptionsPalette`Private`getDisabledTags[
       PatternTest[
        Pattern[CodeAnalysisOptionsPalette`Private`scope, 
         Blank[]], 
        MatchQ[
         Alternatives[$FrontEnd, 
          Blank[NotebookObject], 
          Blank[CellObject]]]], 
       Optional[
        Pattern[CodeAnalysisOptionsPalette`Private`inheritance, 
         Blank[]], CurrentValue]], 
      Or[CodeAnalysisOptionsPalette`Private`inheritance === CurrentValue, 
       CodeAnalysisOptionsPalette`Private`inheritance === 
       AbsoluteCurrentValue]] := If[
      Not[
       MemberQ[
        Options[CodeAnalysisOptionsPalette`Private`scope], CodeAssistOptions -> 
        Condition[
          Pattern[CodeAnalysisOptionsPalette`Private`l1, 
           Blank[]], 
          MemberQ[
          CodeAnalysisOptionsPalette`Private`l1, "CodeToolsOptions" -> 
           Blank[]]]]], {}, 
      With[{
       CodeAnalysisOptionsPalette`Private`tagsPath = {
         CodeAssistOptions, "CodeToolsOptions", "CodeInspect", "Tags"}}, {
       CodeAnalysisOptionsPalette`Private`rawTagsAssoc = 
        CodeAnalysisOptionsPalette`Private`inheritance[
         CodeAnalysisOptionsPalette`Private`scope, 
          CodeAnalysisOptionsPalette`Private`tagsPath]}, {
       CodeAnalysisOptionsPalette`Private`unflattenedTags = Catch[
          KeyValueMap[
           
           Function[{
            CodeAnalysisOptionsPalette`Private`tag, 
             CodeAnalysisOptionsPalette`Private`tagOptions}, 
            Catch[
             Lookup[
              Replace[CodeAnalysisOptionsPalette`Private`tagOptions, Except[
                 Blank[Association]] :> Throw[{}]], Enabled, 
              Map[{CodeAnalysisOptionsPalette`Private`tag, #}& , 
               Catch[
                Keys[
                 Select[CodeAnalysisOptionsPalette`Private`tagOptions, Catch[
                   BooleanQ[
                    Lookup[
                    Replace[#, Except[
                    Blank[Association]] :> Throw[{}]], Enabled, None]]]& ]]]],
               Replace[#, {PatternTest[
                  Blank[], BooleanQ] -> 
                CodeAnalysisOptionsPalette`Private`tag, Blank[] -> 
                Nothing}]& ]]], 
           Replace[CodeAnalysisOptionsPalette`Private`rawTagsAssoc, Except[
              Blank[Association]] :> Throw[{}]]]]}, 
       SortBy[
        Flatten[CodeAnalysisOptionsPalette`Private`unflattenedTags, 1], 
        Replace[#, Pattern[CodeAnalysisOptionsPalette`Private`l, {
            BlankSequence[String]}] :> 
         StringJoin[CodeAnalysisOptionsPalette`Private`l]]& ]]], 
    CodeAnalysisOptionsPalette`Private`constructTagEnabledPath[
      PatternTest[
       Pattern[CodeAnalysisOptionsPalette`Private`tag, 
        Blank[]], 
       MatchQ[
        Alternatives[
         Blank[String], {
          Blank[String], 
          Blank[String]}]]]] := {
     CodeAssistOptions, "CodeToolsOptions", "CodeInspect", "Tags", 
      Switch[
       Head[CodeAnalysisOptionsPalette`Private`tag], String, 
       CodeAnalysisOptionsPalette`Private`tag, List, 
       Splice[CodeAnalysisOptionsPalette`Private`tag]], Enabled}, 
    CodeAnalysisOptionsPalette`Private`disabledTags[
      Pattern[CodeAnalysisOptionsPalette`Private`notebook, 
       Blank[NotebookObject]], 
      Optional[
       Pattern[CodeAnalysisOptionsPalette`Private`cell, 
        Blank[]], None]] := Replace[
      Union[
       Map[
        Function[
        CodeAnalysisOptionsPalette`Private`tag, {
         CodeAnalysisOptionsPalette`Private`tag, $FrontEnd}], 
        CodeAnalysisOptionsPalette`Private`getDisabledTags[$FrontEnd]], 
       Map[
        Function[
        CodeAnalysisOptionsPalette`Private`tag, {
         CodeAnalysisOptionsPalette`Private`tag, 
          CodeAnalysisOptionsPalette`Private`notebook}], 
        CodeAnalysisOptionsPalette`Private`getDisabledTags[
        CodeAnalysisOptionsPalette`Private`notebook]], 
       If[CodeAnalysisOptionsPalette`Private`cell === None, {}, 
        Map[
         Function[
         CodeAnalysisOptionsPalette`Private`tag, {
          CodeAnalysisOptionsPalette`Private`tag, 
           CodeAnalysisOptionsPalette`Private`cell}], 
         Flatten[
          Map[CodeAnalysisOptionsPalette`Private`getDisabledTags, 
           Flatten[{CodeAnalysisOptionsPalette`Private`cell}]], 1]]]], 
      Except[
        Blank[List]] -> {}], CodeAnalysisOptionsPalette`Private`togglerPane[] := 
    With[{CodeAnalysisOptionsPalette`Private`notebook = InputNotebook[]}, {
      CodeAnalysisOptionsPalette`Private`cell = 
       With[{CodeAnalysisOptionsPalette`Private`cells = 
          SelectedCells[CodeAnalysisOptionsPalette`Private`notebook]}, 
         Replace[CodeAnalysisOptionsPalette`Private`cells, Except[{
             BlankSequence[CellObject]}] -> None]]}, {
      CodeAnalysisOptionsPalette`Private`tags = 
       CodeAnalysisOptionsPalette`Private`disabledTags[
        CodeAnalysisOptionsPalette`Private`notebook, 
         CodeAnalysisOptionsPalette`Private`cell]}, 
      Highlighted[
       Pane[
        If[CodeAnalysisOptionsPalette`Private`tags === {}, 
         Column[{
           Spacer[{1, 100}], 
           CodeInspector`LinterUI`Private`styleData["TogglerPaletteHeadings"][
           "No ignored issues affecting the selection", FontSlant -> Italic, 
            FontSize -> 14]}, ItemSize -> {Full, 20}, Spacings -> 0, 
          BaseStyle -> {FontSize -> 1}], 
         Column[{
           Spacer[{1, 5}], 
           Grid[{{
              Spacer[33], 
              Pane[
               CodeInspector`LinterUI`Private`styleData[
               "TogglerPaletteHeadings"][
               "Issue", FontColor -> GrayLevel[0.45]], 
               ImageSize -> {151, 17}], 
              Pane[
               CodeInspector`LinterUI`Private`styleData[
               "TogglerPaletteHeadings"][
               "Scope", FontColor -> GrayLevel[0.45]], 
               ImageSize -> {110, 17}]}}, Dividers -> {Center, False}, 
            FrameStyle -> Directive[
              AbsoluteThickness[1], 
              CodeInspector`LinterUI`Private`colorData["TogglerBack"]], 
            Spacings -> {10, 0}, ItemSize -> Full, Alignment -> Left, 
            BaseStyle -> {FontSize -> 1}], 
           Pane[
            Row[
             Apply[
             CodeAnalysisOptionsPalette`Private`clearSuppressionControl, 
              CodeAnalysisOptionsPalette`Private`tags, {1}]], ImageSizeAction -> 
            "Scrollable", Scrollbars -> {False, Automatic}, 
            AppearanceElements -> None, Alignment -> {Center, Top}, 
            ImageSize -> {333, 185}, FrameMargins -> {{0, 0}, {1, 1}}, 
            BaseStyle -> {LineIndent -> 0}], 
           Spacer[{1, 4}], 
           DynamicModule[{CodeAnalysisOptionsPalette`Private`hoverQ}, 
            DynamicWrapper[
             Pane[
              CodeInspector`LinterUI`Private`button[
               Row[{
                 CodeAnalysisOptionsPalette`Private`togglerClearAllButton[
                  Dynamic[CodeAnalysisOptionsPalette`Private`hoverQ]], 
                 Spacer[3], 
                 Style["Stop Ignoring All Issues", FontSize -> 13]}], 
               CurrentValue[$FrontEnd, {
                  CodeAssistOptions, "CodeToolsOptions", "CodeInspect", 
                   "Tags"}] = Inherited; CurrentValue[
                  InputNotebook[], {
                  CodeAssistOptions, "CodeToolsOptions", "CodeInspect", 
                   "Tags"}] = Inherited; CurrentValue[
                  SelectedCells[
                   InputNotebook[]], {
                  CodeAssistOptions, "CodeToolsOptions", "CodeInspect", 
                   "Tags"}] = Inherited; 
               CodeInspector`LinterUI`Private`togglerTickle = RandomReal[], 
               FrameMargins -> {{5.5, 8}, {2, 0}}], 
              FrameMargins -> {{6, 0}, {3, 3}}], 
             CodeAnalysisOptionsPalette`Private`hoverQ = 
             CurrentValue["MouseOver"]]]}, 
          BaseStyle -> {FontSize -> 1, FontColor -> RGBColor[0, 0, 0, 0]}, 
          Spacings -> {0, {0, 0, 4, {0}}}, ItemSize -> {0, 0}, Spacings -> 0, 
          Dividers -> {None, {3 -> GrayLevel[0.8]}}]], 
        ImageSize -> {335, 243}, Alignment -> {Center, Top}], Background -> 
       CodeInspector`LinterUI`Private`colorData["TogglerBack"], Frame -> True,
        FrameStyle -> Directive[
         AbsoluteThickness[1], 
         CodeInspector`LinterUI`Private`colorData["TogglerPodEdge"]], 
       FrameMargins -> None, RoundingRadius -> 3]], 
    CodeAnalysisOptionsPalette`Private`togglerClearAllButton[
      Dynamic[
       Pattern[CodeAnalysisOptionsPalette`Private`hoverQ, 
        Blank[]]]] := Graphics[{
       CapForm["Round"], 
       AbsoluteThickness[1.5], 
       Dynamic[
        If[CodeAnalysisOptionsPalette`Private`hoverQ, 
         CodeInspector`LinterUI`Private`colorData["TogglerEdgeHover"], 
         CodeInspector`LinterUI`Private`colorData["TogglerCross"]]], 
       Line[{{{-1, -1}, {1, 1}}, {{-1, 1}, {1, -1}}}]}, ImageSize -> 
      15 {1, 1}, PlotRangePadding -> 1.75, PlotRange -> 1, BaselinePosition -> 
      Scaled[0.2]], CodeAnalysisOptionsPalette`Private`clearSuppressionControl[
      PatternTest[
       Pattern[CodeAnalysisOptionsPalette`Private`tag, 
        Blank[]], 
       MatchQ[
        Alternatives[
         Blank[String], {
          Blank[String], 
          Blank[String]}]]], 
      PatternTest[
       Pattern[CodeAnalysisOptionsPalette`Private`scope, 
        Blank[]], 
       MatchQ[
        Alternatives[
         Blank[FrontEndObject], 
         Blank[NotebookObject], 
         Blank[CellObject], {
          BlankNullSequence[CellObject]}]]]] := 
    With[{CodeAnalysisOptionsPalette`Private`tagText = 
       Replace[CodeAnalysisOptionsPalette`Private`tag, 
         Pattern[CodeAnalysisOptionsPalette`Private`l, 
           Blank[List]] :> StringJoin[
           Insert[
           CodeAnalysisOptionsPalette`Private`l, 
            "\[VeryThinSpace]\:25bb\[VeryThinSpace]", 2]]], 
       CodeAnalysisOptionsPalette`Private`scopeText = 
       Switch[CodeAnalysisOptionsPalette`Private`scope, 
         Blank[FrontEndObject], "All Notebooks", 
         Blank[NotebookObject], 
         FE`Evaluate[
          FEPrivate`TruncateStringToWidth[
           AbsoluteCurrentValue[
           CodeAnalysisOptionsPalette`Private`scope, WindowTitle], 
           "DialogStyle", 105]], 
         Blank[CellObject], "Selected Cell", 
         Blank[], "Selected Cells"]}, 
      DynamicModule[{
       CodeAnalysisOptionsPalette`Private`clearedQ = False, 
        CodeAnalysisOptionsPalette`Private`hoverQ = False}, 
       PaneSelector[{False -> Button[
           DynamicWrapper[
            Highlighted[
             Grid[{{
                CodeAnalysisOptionsPalette`Private`togglerClearAllButton[
                 Dynamic[CodeAnalysisOptionsPalette`Private`hoverQ]], 
                Pane[
                 CodeInspector`LinterUI`Private`styleData["TogglerTagText"][
                 CodeAnalysisOptionsPalette`Private`tagText], 
                 ImageSize -> {150, 20}, BaselinePosition -> Baseline, 
                 Alignment -> {Left, Center}], 
                Pane[
                CodeAnalysisOptionsPalette`Private`scopeText, 
                 ImageSize -> {110, 20}, BaselinePosition -> Baseline, 
                 Alignment -> {Left, Center}]}}, ItemSize -> Full, 
              Alignment -> {Left, Baseline}, Dividers -> {Center, False}, 
              FrameStyle -> Directive[
                AbsoluteThickness[1], 
                CodeInspector`LinterUI`Private`colorData["TogglerDelim"]], 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 13, FontColor -> 
                CodeInspector`LinterUI`Private`colorData["TogglerText"]}], 
             Background -> Dynamic[
               If[CodeAnalysisOptionsPalette`Private`hoverQ, 
                CodeInspector`LinterUI`Private`colorData["TogglerBackHover"], 
                
                CodeInspector`LinterUI`Private`colorData["TogglerBack"]]], 
             RoundingRadius -> Dynamic[
               If[CodeAnalysisOptionsPalette`Private`hoverQ, 3, 0]], Frame -> 
             True, FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> Dynamic[
               If[CodeAnalysisOptionsPalette`Private`hoverQ, 
                CodeInspector`LinterUI`Private`colorData["TogglerEdgeHover"], 
                
                CodeInspector`LinterUI`Private`colorData["TogglerEdge"]]]], 
            CodeAnalysisOptionsPalette`Private`hoverQ = 
            CurrentValue["MouseOver"]], 
           CurrentValue[CodeAnalysisOptionsPalette`Private`scope, 
              CodeAnalysisOptionsPalette`Private`constructTagEnabledPath[
              CodeAnalysisOptionsPalette`Private`tag]] = Inherited; 
           CodeAnalysisOptionsPalette`Private`clearedQ = True; 
           CodeInspector`LinterUI`Private`togglerTickle = RandomReal[], 
           Appearance -> None, Tooltip -> "Stop ignoring issue", TooltipDelay -> 
           0], True -> Pane[
           Spacer[{0, 0}], ImageSize -> {0, 0}, 
           ImageMargins -> {{0, 0}, {-1, 0}}]}, 
        Dynamic[CodeAnalysisOptionsPalette`Private`clearedQ]]]], 
    CodeInspector`LinterUI`Private`colorData = 
    Association[
     "UIBack" -> GrayLevel[0.97], "UIEdge" -> GrayLevel[0.85], "CloseButton" -> 
      GrayLevel[0.6], "CodeBack" -> RGBColor[0.99, 1, 1], "UIDark" -> 
      GrayLevel[0.4], "WarningText" -> RGBColor[0.89, 0.14, 0.05], 
      "PopupEdge" -> GrayLevel[0.75], "PopupBack" -> GrayLevel[0.97], 
      "Delimiter" -> GrayLevel[0.85], "CellBracketButtonText" -> 
      GrayLevel[0.25], "CellBracketButtonBack" -> GrayLevel[0.95], 
      "CellBracketButtonHover" -> GrayLevel[0.98], "CellBracketButtonEdge" -> 
      GrayLevel[0.9], "ButtonBack" -> GrayLevel[1], "ButtonBackHover" -> 
      GrayLevel[1], "ButtonBackMouseDown" -> Hue[0.55, 0.33, 1], 
      "ButtonBackInactive" -> GrayLevel[1], "ButtonEdge" -> GrayLevel[0.8], 
      "ButtonEdgeHover" -> Hue[0.55, 0.82, 0.87], "ButtonEdgeInactive" -> 
      GrayLevel[0.85], "ButtonText" -> GrayLevel[0.2], "ButtonTextHover" -> 
      GrayLevel[0.2], "ButtonTextInactive" -> GrayLevel[0.7], 
      "ApplyButtonText" -> RGBColor[1, 1, 1], "ApplyButtonBack" -> 
      RGBColor[0.247059, 0.666667, 0.301961], "ApplyButtonBackHover" -> 
      RGBColor[0.266667, 0.72549, 0.329412], "ApplyButtonEdge" -> 
      RGBColor[0.266667, 0.733333, 0.329412], "HashButtonBack" -> 
      GrayLevel[1], "HashButtonBackHover" -> Hue[0.1, 0.26, 1], 
      "HashButtonEdge" -> RGBColor[81/85, 0.79, 0.37], "RaftBack" -> 
      RGBColor[0.96, 0.97, 0.97], "RaftMenuBack" -> GrayLevel[1], 
      "RaftItemHighlight" -> RGBColor[0.96, 0.97, 0.97], "RaftBackHover" -> 
      RGBColor[0.99, 1, 1], "RaftBackOpen" -> RGBColor[0.94, 0.95, 0.96], 
      "RaftFrame" -> 
      RGBColor[0.7568627450980392, 0.8274509803921568, 0.8823529411764706], 
      "RaftLabel" -> GrayLevel[0.2], "RaftMenuItem" -> GrayLevel[0.2], "Tag" -> 
      GrayLevel[0.3], "RaftMenuSectionHeader" -> GrayLevel[0.4], 
      "RaftDelimiter" -> GrayLevel[0.9], "CodeHighlight" -> 
      RGBColor[1, 0.67, 0.73], "TogglerEdge" -> GrayLevel[0.975], 
      "TogglerEdgeHover" -> Hue[0.55, 0.82, 0.87], "TogglerBack" -> 
      GrayLevel[0.975], "TogglerBackHover" -> GrayLevel[1], "TogglerPodEdge" -> 
      GrayLevel[0.9], "TogglerDelim" -> GrayLevel[0.8], "TogglerText" -> 
      GrayLevel[0.2], "TogglerCross" -> GrayLevel[0.8], "Formatting" -> 
      RGBColor[0.9400000000000001, 0.64, 0], "Remark" -> 
      RGBColor[0.9400000000000001, 0.64, 0], "ImplicitTimes" -> 
      RGBColor[0.9400000000000001, 0.64, 0], "Scoping" -> 
      RGBColor[0.9400000000000001, 0.64, 0], "Warning" -> 
      RGBColor[1, 0.45, 0], "Error" -> 
      RGBColor[0.827451, 0.00392157, 0.00392157], "Fatal" -> 
      RGBColor[0.827451, 0.00392157, 0.00392157], 3 -> 
      RGBColor[0.9400000000000001, 0.64, 0], 2 -> RGBColor[1, 0.45, 0], 1 -> 
      RGBColor[0.827451, 0.00392157, 0.00392157]], 
    CodeInspector`LinterUI`Private`styleData = 
    Association["SectionHeader" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["UIDark"], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 13]& ), 
      "RaftLabel" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["RaftLabel"], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 13]& ), 
      "RaftMenuItem" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["RaftMenuItem"], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 13]& ), 
      "RaftMenuSectionHeading" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["RaftMenuSectionHeader"], 
        FontFamily -> "Source Sans Pro", FontWeight -> Plain, FontSize -> 
        13]& ), "Button" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["ButtonText"], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 14]& ), 
      "ApplyButton" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["ApplyButtonText"], 
        FontFamily -> "Source Sans Pro", FontWeight -> Plain, FontSize -> 
        12]& ), "FooterText" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["UIDark"], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 12]& ), 
      "CellBracketButton" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["CellBracketButtonText"], 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", FontSize -> 
        10]& ), "FixedWidth" -> (Style[#, 
        SlotSequence[2], FontColor -> 
        CodeInspector`LinterUI`Private`colorData["ButtonText"], FontFamily -> 
        "Source Code Pro", FontWeight -> "SemiBold", FontSize -> 12]& ), 
      "TogglerIndicator" -> (Style[#, 
        SlotSequence[2], FontFamily -> "Source Code Pro", FontWeight -> 
        "SemiBold", FontSize -> 12]& ), "TogglerTagText" -> (Style[#, 
        SlotSequence[2], FontColor -> GrayLevel[0.2], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 12]& ), 
      "TogglerPaletteHeadings" -> (Style[#, 
        SlotSequence[2], FontColor -> GrayLevel[0.4], FontFamily -> 
        "Source Sans Pro", FontWeight -> Plain, FontSize -> 13]& ), 
      "TogglerPaletteSectionHeadings" -> (Style[#, 
        SlotSequence[2], FontColor -> GrayLevel[0.5], FontFamily -> 
        "Source Sans Pro", FontWeight -> "SemiBold", FontSize -> 12]& )], 
    Attributes[CodeInspector`LinterUI`Private`button] = {HoldRest}, Null, 
    CodeInspector`LinterUI`Private`button[
      Pattern[CodeInspector`LinterUI`Private`disp, 
       Blank[]], 
      Pattern[CodeInspector`LinterUI`Private`action, 
       Blank[]], 
      OptionsPattern[{
       ImageSize -> {Automatic, 19}, FrameMargins -> {9 {1, 1}, 0 {1, 1}}, 
        BaselinePosition -> Baseline, Alignment -> {Center, Center}, Method -> 
        "Preemptive", "ActiveQ" -> True, "TextColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonText"], 
        "TextHoverColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonTextHover"], 
        "TextInactiveColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonTextInactive"], 
        "BackColor" -> CodeInspector`LinterUI`Private`colorData["ButtonBack"],
         "BackHoverColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonBackHover"], 
        "BackMouseDownColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonBackMouseDown"], 
        "BackInactiveColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonBackInactive"], 
        "EdgeColor" -> CodeInspector`LinterUI`Private`colorData["ButtonEdge"],
         "EdgeHoverColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"], 
        "EdgeInactiveColor" -> 
        CodeInspector`LinterUI`Private`colorData["ButtonEdgeInactive"]}]] := 
    DynamicModule[{
      CodeInspector`LinterUI`Private`hoverQ = False, 
       CodeInspector`LinterUI`Private`mouseDownQ = False, 
       CodeInspector`LinterUI`Private`fontColor}, 
      Button[
       DynamicWrapper[
        Highlighted[
         DynamicWrapper[
          CodeInspector`LinterUI`Private`styleData["Button"][
           Pane[
            If[Head[CodeInspector`LinterUI`Private`disp] === Function, 
             CodeInspector`LinterUI`Private`disp[
             CodeInspector`LinterUI`Private`fontColor, 
              CodeInspector`LinterUI`Private`hoverQ, 
              CodeInspector`LinterUI`Private`mouseDownQ], 
             CodeInspector`LinterUI`Private`disp], ContentPadding -> True, 
            FrameMargins -> None, BaselinePosition -> Baseline], FontColor -> 
           Dynamic[CodeInspector`LinterUI`Private`fontColor]], 
          CodeInspector`LinterUI`Private`fontColor = Which[
            TrueQ[
             Not[
              OptionValue["ActiveQ"]]], 
            OptionValue["TextInactiveColor"], 
            CodeInspector`LinterUI`Private`hoverQ, 
            OptionValue["TextHoverColor"], True, 
            OptionValue["TextColor"]]], ContentPadding -> False, FrameMargins -> 
         OptionValue[FrameMargins], Alignment -> OptionValue[Alignment], 
         Frame -> True, ImageSize -> OptionValue[ImageSize], RoundingRadius -> 
         3, FrameStyle -> Dynamic[
           Directive[
            AbsoluteThickness[0.5], 
            Which[
             TrueQ[
              Not[
               OptionValue["ActiveQ"]]], 
             OptionValue["EdgeInactiveColor"], 
             CodeInspector`LinterUI`Private`hoverQ, 
             OptionValue["EdgeHoverColor"], True, 
             OptionValue["EdgeColor"]]]], Background -> Dynamic[
           Which[
            TrueQ[
             Not[
              OptionValue["ActiveQ"]]], 
            OptionValue["BackInactiveColor"], 
            And[
            CodeInspector`LinterUI`Private`hoverQ, 
             CodeInspector`LinterUI`Private`mouseDownQ], 
            OptionValue["BackMouseDownColor"], 
            CodeInspector`LinterUI`Private`hoverQ, 
            OptionValue["BackHoverColor"], True, 
            OptionValue["BackColor"]]]], 
        CodeInspector`LinterUI`Private`hoverQ = CurrentValue["MouseOver"]; 
        CodeInspector`LinterUI`Private`mouseDownQ = 
         CurrentValue["MouseButtonTest"]], 
       If[
       OptionValue["ActiveQ"] =!= False, 
        CodeInspector`LinterUI`Private`action], Appearance -> None, 
       ContentPadding -> False, BaselinePosition -> 
       OptionValue[BaselinePosition], Method -> OptionValue[Method]]]}]],
 CellMargins->{{0, 0}, {0, 0}},
 CellBracketOptions->{"Color"->RGBColor[0.269993, 0.308507, 0.6]},
 CellHorizontalScrolling->True,
 PageBreakAbove->True,
 PageBreakWithin->False,
 ShowAutoStyles->True,
 LineSpacing->{1.25, 0},
 AutoItalicWords->{},
 ScriptMinSize->9,
 ShowStringCharacters->False,
 FontFamily:>CurrentValue["PanelFontFamily"],
 FontSize:>CurrentValue[
  "PanelFontSize"],ExpressionUUID->"9351453a-1ca8-4320-b583-5891a8e34d73"]
},
Saveable->False,
Evaluator->"System",
WindowSize->All,
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
WindowElements->{},
WindowTitle->"Code Analysis Options",
MenuSortingValue->1150,
Background->GrayLevel[1],
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (June 19, 2021)",
StyleDefinitions->"Palette.nb",
ExpressionUUID->"e4fcc80a-090a-4dee-a463-b73ff2e15cef"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[613, 22, 24887, 513, 283, InheritFromParent,ExpressionUUID->"9351453a-1ca8-4320-b583-5891a8e34d73",
 PageBreakAbove->True,
 PageBreakWithin->False]
}
]
*)

(* End of internal cache information *)

